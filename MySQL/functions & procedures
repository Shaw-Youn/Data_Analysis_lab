{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "38303bbc",
   "metadata": {},
   "source": [
    "When creating stored functions or procedures in MySQL, you can specify how they interact with the database using clauses like `READS SQL DATA`, `MODIFIES SQL DATA`, `CONTAINS SQL`, and `NO SQL`. These clauses inform MySQL about the behavior of the function or procedure, which can be important for optimization, security, and ensuring proper execution in certain contexts (like replication).\n",
    "\n",
    "### 1. `READS SQL DATA`\n",
    "\n",
    "- **Description:** Indicates that the function reads data from the database but does not modify it. This clause is used when your function performs operations like `SELECT` queries that retrieve data.\n",
    "- **Usage:** Use `READS SQL DATA` when your function reads but does not alter any database tables or rows.\n",
    "- **Example:**\n",
    "  ```sql\n",
    "  CREATE FUNCTION get_total_sales()\n",
    "  RETURNS DECIMAL(10,2)\n",
    "  READS SQL DATA\n",
    "  BEGIN\n",
    "      DECLARE total DECIMAL(10,2);\n",
    "      SELECT SUM(amount) INTO total FROM sales;\n",
    "      RETURN total;\n",
    "  END;\n",
    "  ```\n",
    "- **When to Use:** Use this when your function performs queries to read data but does not perform any `INSERT`, `UPDATE`, or `DELETE` operations.\n",
    "\n",
    "### 2. `MODIFIES SQL DATA`\n",
    "\n",
    "- **Description:** Indicates that the function modifies data in the database. This clause is used when your function performs operations that change the state of the database, such as `INSERT`, `UPDATE`, or `DELETE`.\n",
    "- **Usage:** Use `MODIFIES SQL DATA` when your function needs to modify database tables or rows.\n",
    "- **Example:**\n",
    "  ```sql\n",
    "  CREATE FUNCTION update_sales(new_sales DECIMAL(10,2))\n",
    "  RETURNS INT\n",
    "  MODIFIES SQL DATA\n",
    "  BEGIN\n",
    "      UPDATE sales_summary SET total_sales = total_sales + new_sales;\n",
    "      RETURN ROW_COUNT();\n",
    "  END;\n",
    "  ```\n",
    "- **When to Use:** Use this when your function is intended to perform data modification operations on the database.\n",
    "\n",
    "### 3. `CONTAINS SQL`\n",
    "\n",
    "- **Description:** Indicates that the function contains SQL statements but does not necessarily read or modify data in the database. It might perform operations like declaring variables, setting them, or calling other functions.\n",
    "- **Usage:** Use `CONTAINS SQL` when your function includes SQL statements that do not read or modify database data.\n",
    "- **Example:**\n",
    "  ```sql\n",
    "  CREATE FUNCTION calculate_tax(price DECIMAL(10,2))\n",
    "  RETURNS DECIMAL(10,2)\n",
    "  CONTAINS SQL\n",
    "  BEGIN\n",
    "      DECLARE tax DECIMAL(10,2);\n",
    "      SET tax = price * 0.08;\n",
    "      RETURN tax;\n",
    "  END;\n",
    "  ```\n",
    "- **When to Use:** Use this when your function has SQL logic but does not directly interact with the database’s data (e.g., just variable assignments or simple expressions).\n",
    "\n",
    "### 4. `NO SQL`\n",
    "\n",
    "- **Description:** Indicates that the function does not contain any SQL statements. This clause is used when your function performs computations or logic without interacting with the database at all.\n",
    "- **Usage:** Use `NO SQL` when your function does not execute any SQL statements.\n",
    "- **Example:**\n",
    "  ```sql\n",
    "  CREATE FUNCTION square_number(n INT)\n",
    "  RETURNS INT\n",
    "  NO SQL\n",
    "  BEGIN\n",
    "      RETURN n * n;\n",
    "  END;\n",
    "  ```\n",
    "- **When to Use:** Use this when your function is purely computational and does not involve any SQL operations or data access.\n",
    "\n",
    "### Summary: When to Use Each Clause\n",
    "\n",
    "- **`READS SQL DATA`:** Use when your function queries the database but does not modify any data.\n",
    "- **`MODIFIES SQL DATA`:** Use when your function performs any operations that change the data in the database.\n",
    "- **`CONTAINS SQL`:** Use when your function contains SQL logic that does not interact with database data.\n",
    "- **`NO SQL`:** Use when your function does not involve any SQL statements and is purely computational.\n",
    "\n",
    "These clauses help MySQL optimize the execution of your functions and ensure that they are used correctly in contexts like replication or within other database operations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21b9025b",
   "metadata": {},
   "source": [
    "I understand your confusion. The term \"CONTAINS SQL\" in MySQL can be a bit abstract because it deals with the structure and operations inside a stored function or procedure rather than direct data interaction.\n",
    "\n",
    "### **What Does \"CONTAINS SQL\" Mean?**\n",
    "\n",
    "When we say a function \"CONTAINS SQL,\" it means that the function includes SQL statements, but those statements do not read from or modify the data in the database. Essentially, the SQL code in such functions might involve declaring variables, performing calculations, setting values, or handling control flow (like loops and conditional statements) without actually querying or altering the tables in the database.\n",
    "\n",
    "### **Examples of SQL Logic in \"CONTAINS SQL\"**\n",
    "\n",
    "Here's a breakdown of what SQL logic might look like in a \"CONTAINS SQL\" function:\n",
    "\n",
    "1. **Variable Declarations:**\n",
    "   - Declaring variables to store temporary values.\n",
    "   - Example: `DECLARE total_sales INT;`\n",
    "\n",
    "2. **Assignments:**\n",
    "   - Assigning values to variables.\n",
    "   - Example: `SET total_sales = 1000;`\n",
    "\n",
    "3. **Control Flow Statements:**\n",
    "   - Using `IF`, `CASE`, `LOOP`, or other control structures to manage logic within the function.\n",
    "   - Example:\n",
    "     ```sql\n",
    "     IF total_sales > 1000 THEN\n",
    "         SET discount = 0.1;\n",
    "     ELSE\n",
    "         SET discount = 0.05;\n",
    "     END IF;\n",
    "     ```\n",
    "\n",
    "### **Key Point of \"CONTAINS SQL\":**\n",
    "\n",
    "- **No Interaction with Database Tables:** \n",
    "  - The key characteristic of a \"CONTAINS SQL\" function is that it does not involve any operations that interact with the data in the database tables. It doesn't perform `SELECT` queries to read data or `INSERT`, `UPDATE`, `DELETE` operations to modify data.\n",
    "\n",
    "### **Example of a \"CONTAINS SQL\" Function:**\n",
    "\n",
    "Here’s a simple example of a function that fits the \"CONTAINS SQL\" category:\n",
    "\n",
    "```sql\n",
    "CREATE FUNCTION calculate_discount(price DECIMAL(10,2))\n",
    "RETURNS DECIMAL(10,2)\n",
    "CONTAINS SQL\n",
    "BEGIN\n",
    "    DECLARE discount_rate DECIMAL(3,2);\n",
    "    \n",
    "    IF price > 100 THEN\n",
    "        SET discount_rate = 0.10;\n",
    "    ELSE\n",
    "        SET discount_rate = 0.05;\n",
    "    END IF;\n",
    "    \n",
    "    RETURN price * discount_rate;\n",
    "END;\n",
    "```\n",
    "\n",
    "### **Explanation:**\n",
    "\n",
    "- **Purpose:** The function `calculate_discount` determines a discount rate based on the price.\n",
    "- **Logic:** It uses an `IF` statement to decide the discount rate:\n",
    "  - If the price is greater than 100, it sets the discount rate to 10%.\n",
    "  - Otherwise, it sets the discount rate to 5%.\n",
    "- **Return Value:** It returns the calculated discount amount.\n",
    "- **No Data Interaction:** The function does not query any tables or modify any data; it only uses internal logic to compute a value.\n",
    "\n",
    "### **When to Use \"CONTAINS SQL\":**\n",
    "\n",
    "You use \"CONTAINS SQL\" when your function:\n",
    "- **Includes SQL statements**, such as `DECLARE`, `SET`, or control flow statements (`IF`, `CASE`, `LOOP`), but\n",
    "- **Does not perform operations** that interact with the database data (no `SELECT`, `INSERT`, `UPDATE`, `DELETE` statements).\n",
    "\n",
    "In short, \"CONTAINS SQL\" applies to functions that have internal SQL logic without querying or altering the database's stored data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebe7230a",
   "metadata": {},
   "source": [
    "In MySQL, the `DETERMINISTIC` and `NOT DETERMINISTIC` clauses are used to indicate whether a stored function (or sometimes a stored procedure) will always produce the same output given the same input parameters. This distinction is important for performance optimization, particularly in caching and replication contexts.\n",
    "\n",
    "### **1. DETERMINISTIC**\n",
    "\n",
    "- **Definition:** A function is `DETERMINISTIC` if it always returns the same result when called with the same input parameters. This means that the function does not rely on any external factors or state that could change between calls.\n",
    "- **Use Case:** Use `DETERMINISTIC` when your function's result is based solely on its input parameters and does not depend on:\n",
    "  - Current date or time (`NOW()`, `CURDATE()`)\n",
    "  - Random numbers (`RAND()`)\n",
    "  - Data that may change (`SELECT` from a table that could be modified)\n",
    "\n",
    "- **Example:**\n",
    "  ```sql\n",
    "  CREATE FUNCTION calculate_area(radius FLOAT)\n",
    "  RETURNS FLOAT\n",
    "  DETERMINISTIC\n",
    "  BEGIN\n",
    "      RETURN 3.14159 * radius * radius;\n",
    "  END;\n",
    "  ```\n",
    "\n",
    "  **Explanation:** \n",
    "  - The function `calculate_area` calculates the area of a circle given a radius. \n",
    "  - The result only depends on the value of `radius` and the constant π (3.14159).\n",
    "  - For the same `radius`, it will always return the same area, so it's `DETERMINISTIC`.\n",
    "\n",
    "### **2. NOT DETERMINISTIC**\n",
    "\n",
    "- **Definition:** A function is `NOT DETERMINISTIC` if it can return different results when called with the same input parameters. This usually happens because the function relies on some external state or non-deterministic elements.\n",
    "- **Use Case:** Use `NOT DETERMINISTIC` when your function's result could vary even if the input parameters remain the same. Examples include:\n",
    "  - Functions that use the current date or time (`NOW()`, `CURDATE()`)\n",
    "  - Functions that generate random numbers (`RAND()`)\n",
    "  - Functions that query tables where data might change (`SELECT` that reads a table subject to updates)\n",
    "\n",
    "- **Example:**\n",
    "  ```sql\n",
    "  CREATE FUNCTION get_current_date_time()\n",
    "  RETURNS DATETIME\n",
    "  NOT DETERMINISTIC\n",
    "  BEGIN\n",
    "      RETURN NOW();\n",
    "  END;\n",
    "  ```\n",
    "\n",
    "  **Explanation:**\n",
    "  - The function `get_current_date_time` returns the current date and time.\n",
    "  - Even with no parameters, calling it at different times will produce different results.\n",
    "  - Therefore, it is `NOT DETERMINISTIC`.\n",
    "\n",
    "### **When to Use Each**\n",
    "\n",
    "- **Use `DETERMINISTIC`** if:\n",
    "  - Your function's output is solely determined by its input parameters.\n",
    "  - There are no external factors, like time, random numbers, or changing data, that could affect the result.\n",
    "  - Example scenarios: mathematical calculations, string manipulations, etc.\n",
    "\n",
    "- **Use `NOT DETERMINISTIC`** if:\n",
    "  - Your function's output can vary even with the same input parameters.\n",
    "  - The function depends on variables that can change, such as the current time, random numbers, or data in tables that may be modified.\n",
    "  - Example scenarios: retrieving the current date/time, generating random numbers, querying tables with dynamic data.\n",
    "\n",
    "### **Why It Matters**\n",
    "\n",
    "- **Performance Optimization:**\n",
    "  - MySQL can optimize query execution if it knows that a function is `DETERMINISTIC`. For example, it might cache results to avoid recalculating them unnecessarily.\n",
    "  - For `NOT DETERMINISTIC` functions, MySQL cannot assume that a result can be reused, so it may recompute the function every time it’s called.\n",
    "\n",
    "- **Replication:**\n",
    "  - In MySQL replication, using `DETERMINISTIC` functions ensures consistency across the master and replica databases. \n",
    "  - Using `NOT DETERMINISTIC` functions could lead to different results on the master and replica because the function might produce different outcomes when executed at different times.\n",
    "\n",
    "Understanding whether your function is `DETERMINISTIC` or `NOT DETERMINISTIC` is essential for ensuring accurate results and optimizing the performance of your MySQL database."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c863c09",
   "metadata": {},
   "source": [
    "In MySQL, the semicolon (`;`) is used as the default statement delimiter. It indicates the end of a SQL statement, allowing MySQL to understand where one statement finishes and another begins. Here’s a detailed explanation of when to use the semicolon:\n",
    "\n",
    "### **When to Use Semicolons (`;`) in MySQL:**\n",
    "\n",
    "1. **Ending SQL Statements:**\n",
    "   - **General Usage:** A semicolon is used to terminate a SQL statement. This is necessary when executing multiple statements in a single query or script.\n",
    "   - **Examples:**\n",
    "     ```sql\n",
    "     SELECT * FROM customers;\n",
    "     UPDATE orders SET status = 'shipped' WHERE order_id = 123;\n",
    "     ```\n",
    "\n",
    "2. **Inside Stored Programs (Functions, Procedures, Triggers):**\n",
    "   - **Within `BEGIN ... END` Blocks:** When writing stored procedures, functions, or triggers, you need to terminate each statement inside the `BEGIN ... END` block with a semicolon.\n",
    "   - **Example:**\n",
    "     ```sql\n",
    "     DELIMITER //\n",
    "\n",
    "     CREATE FUNCTION area_calculation(radius FLOAT)\n",
    "     RETURNS FLOAT\n",
    "     BEGIN\n",
    "         DECLARE area FLOAT;\n",
    "         SET area = radius * radius * PI();\n",
    "         RETURN area;\n",
    "     END //\n",
    "\n",
    "     DELIMITER ;\n",
    "     ```\n",
    "   - **Explanation:** The semicolon terminates each SQL statement inside the function, like `DECLARE`, `SET`, and `RETURN`.\n",
    "\n",
    "3. **After `DELIMITER` Statement:**\n",
    "   - **To Change Delimiters:** When changing the delimiter using the `DELIMITER` command, you typically do not use a semicolon after the `DELIMITER` keyword itself, but you do use a semicolon when resetting the delimiter back to its default.\n",
    "   - **Example:**\n",
    "     ```sql\n",
    "     DELIMITER //\n",
    "     -- Function or procedure code here\n",
    "     DELIMITER ;\n",
    "     ```\n",
    "\n",
    "### **When Not to Use Semicolons:**\n",
    "\n",
    "1. **Single Statement Queries:**\n",
    "   - In many interactive MySQL environments (like MySQL command-line, or single statements in a GUI), a single query can be executed without needing a semicolon if it’s the only statement being executed.\n",
    "   - **Example:**\n",
    "     ```sql\n",
    "     SELECT * FROM customers\n",
    "     ```\n",
    "\n",
    "2. **Within `DELIMITER` Re-Definitions:**\n",
    "   - When defining or changing a delimiter (e.g., `DELIMITER //`), you don’t need to end that particular line with a semicolon.\n",
    "\n",
    "### **Summary:**\n",
    "\n",
    "- **Always use semicolons** to terminate SQL statements in scripts, within stored procedures, functions, triggers, and when writing multiple statements in a sequence.\n",
    "- **In stored programs** (`BEGIN ... END` blocks), every SQL statement should end with a semicolon.\n",
    "- **No semicolon is needed** immediately after the `DELIMITER` command itself, but when resetting the delimiter to `;`, it’s used.\n",
    "\n",
    "Understanding the proper use of semicolons helps in writing clear, error-free SQL code and managing complex scripts effectively."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "842aa259",
   "metadata": {},
   "source": [
    " When using the `ipython-sql` extension in Jupyter Notebook or running SQL directly through Python connectors like `PyMySQL` or `SQLAlchemy`, **you do not need to redefine the delimiter**.\n",
    "\n",
    "### **Why You Don't Need to Redefine the Delimiter:**\n",
    "\n",
    "- **Single Statement Execution:** In these environments, each SQL query or block of SQL code is treated as a single statement, so there’s no need to change the delimiter. The SQL statements are executed one at a time, and the default semicolon (`;`) works fine to terminate each statement.\n",
    "\n",
    "- **No Support for `DELIMITER` Command:** The `DELIMITER` command is specific to MySQL's command-line client and some GUI tools. It is not recognized by the MySQL server itself or by connectors like PyMySQL, SQLAlchemy, or `ipython-sql`. Therefore, trying to use `DELIMITER` in these contexts will result in a syntax error.\n",
    "\n",
    "### **Practical Implication:**\n",
    "- When working in environments like Jupyter Notebook with `ipython-sql`, you simply write your SQL code with regular semicolons to terminate statements.\n",
    "- You can define functions, procedures, or any other SQL code without worrying about delimiter issues.\n",
    "\n",
    "### **Example Without Redefining Delimiter:**\n",
    "\n",
    "Here’s how you can create a function in Jupyter Notebook without needing to redefine the delimiter:\n",
    "\n",
    "```python\n",
    "%%sql\n",
    "CREATE FUNCTION area_calculation(radius FLOAT)\n",
    "RETURNS FLOAT\n",
    "DETERMINISTIC\n",
    "BEGIN\n",
    "    DECLARE area FLOAT;\n",
    "    SET area = radius * radius * PI();\n",
    "    RETURN area;\n",
    "END;\n",
    "```\n",
    "\n",
    "This approach simplifies your workflow and avoids the need for additional commands like `DELIMITER //`, making it easier and more straightforward to run SQL in a Jupyter Notebook or similar Python environments.\n",
    "\n",
    "```python\n",
    "%load_ext sql\n",
    "%sql mysql+pymysql://root:3141592630Pi$@localhost/dbase\n",
    "%%sql\n",
    "\n",
    "CREATE FUNCTION area_calculation(\n",
    "    radius FLOAT)\n",
    "RETURNS FLOAT\n",
    "DETERMINISTIC CONTAINS SQL\n",
    "BEGIN\n",
    "    DECLARE area FLOAT;\n",
    "    SET area = radius * radius * PI();\n",
    "    RETURN area;\n",
    "END \n",
    "\n",
    "%sql select area_calculation(5) as Aera; --Test the function\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3edef212",
   "metadata": {},
   "source": [
    "In MySQL, the `DECLARE` statement is used to define local variables, conditions, or handlers within stored programs like stored procedures, stored functions, or triggers. These declarations are typically made at the beginning of a `BEGIN ... END` block and are used to hold temporary data or manage control flow within the stored program.\n",
    "\n",
    "### **1. Declaring Variables**\n",
    "\n",
    "Variables are used to store temporary data that you might need to manipulate within your stored program.\n",
    "\n",
    "#### **Syntax:**\n",
    "```sql\n",
    "DECLARE variable_name datatype [DEFAULT value];\n",
    "```\n",
    "\n",
    "- **`variable_name`:** The name of the variable you are declaring.\n",
    "- **`datatype`:** The data type of the variable (e.g., `INT`, `FLOAT`, `VARCHAR`).\n",
    "- **`DEFAULT value`:** Optional. Specifies the default value for the variable. If not provided, the variable is initialized to `NULL`.\n",
    "\n",
    "#### **Example:**\n",
    "```sql\n",
    "CREATE PROCEDURE example_procedure()\n",
    "BEGIN\n",
    "    DECLARE total_sales INT DEFAULT 0;\n",
    "    DECLARE product_name VARCHAR(100);\n",
    "    \n",
    "    SET total_sales = 100;\n",
    "    SET product_name = 'Widget';\n",
    "    \n",
    "    -- Additional logic using the variables\n",
    "END;\n",
    "```\n",
    "\n",
    "- **When to Use:** Use `DECLARE` to define variables when you need to store and manipulate data temporarily within a stored procedure, function, or trigger.\n",
    "\n",
    "### **2. Declaring Conditions**\n",
    "\n",
    "Conditions are used to represent specific error or status codes that you might want to handle within your stored program.\n",
    "\n",
    "#### **Syntax:**\n",
    "```sql\n",
    "DECLARE condition_name CONDITION FOR condition_value;\n",
    "```\n",
    "\n",
    "- **`condition_name`:** The name of the condition you are declaring.\n",
    "- **`condition_value`:** This could be an SQLSTATE value or a MySQL error code.\n",
    "\n",
    "#### **Example:**\n",
    "```sql\n",
    "DECLARE no_data_found CONDITION FOR SQLSTATE '02000';\n",
    "```\n",
    "\n",
    "- **When to Use:** Use `DECLARE CONDITION` when you want to name a specific condition or error code so that it can be referenced later, particularly in a handler.\n",
    "\n",
    "### **3. Declaring Handlers**\n",
    "\n",
    "Handlers are used to manage specific conditions (like exceptions) that might occur during the execution of your stored program.\n",
    "\n",
    "#### **Syntax:**\n",
    "```sql\n",
    "DECLARE handler_type HANDLER FOR condition_value handler_action;\n",
    "```\n",
    "\n",
    "- **`handler_type`:** Specifies the behavior of the handler (`CONTINUE`, `EXIT`, or `UNDO`).\n",
    "- **`condition_value`:** The condition that triggers the handler (e.g., `SQLEXCEPTION`, `SQLWARNING`, a specific SQLSTATE, or a named condition).\n",
    "- **`handler_action`:** The action to be performed when the condition occurs, often a block of SQL statements.\n",
    "\n",
    "#### **Example:**\n",
    "```sql\n",
    "DECLARE CONTINUE HANDLER FOR SQLSTATE '02000'\n",
    "BEGIN\n",
    "    -- Handling logic for no data found\n",
    "    SET @message = 'No data found';\n",
    "END;\n",
    "```\n",
    "\n",
    "- **When to Use:** Use `DECLARE HANDLER` when you need to specify actions that should be taken when a specific condition (like an error or warning) occurs during the execution of your stored program.\n",
    "\n",
    "### **Key Points:**\n",
    "\n",
    "- **`DECLARE` statements must be at the beginning** of the `BEGIN ... END` block. They cannot be placed after other SQL statements within the block.\n",
    "- **Scope:** Variables, conditions, and handlers declared with `DECLARE` are local to the stored program or the `BEGIN ... END` block in which they are declared. They cannot be accessed outside that block.\n",
    "\n",
    "### **Example Putting It All Together:**\n",
    "\n",
    "Here’s a more complete example that uses all three types of `DECLARE` statements:\n",
    "\n",
    "```sql\n",
    "DELIMITER //\n",
    "\n",
    "CREATE PROCEDURE process_order(order_id INT)\n",
    "BEGIN\n",
    "    DECLARE order_total DECIMAL(10,2) DEFAULT 0.00;\n",
    "    DECLARE no_more_orders CONDITION FOR SQLSTATE '02000';\n",
    "    \n",
    "    DECLARE CONTINUE HANDLER FOR no_more_orders\n",
    "    BEGIN\n",
    "        -- Logic to handle when no more orders are found\n",
    "        SET order_total = NULL;\n",
    "    END;\n",
    "    \n",
    "    -- Logic to calculate the order total\n",
    "    SELECT SUM(amount) INTO order_total FROM order_items WHERE order_id = process_order.order_id;\n",
    "    \n",
    "    IF order_total IS NULL THEN\n",
    "        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Order total calculation failed';\n",
    "    END IF;\n",
    "    \n",
    "    -- Further processing\n",
    "END//\n",
    "\n",
    "DELIMITER ;\n",
    "```\n",
    "\n",
    "### **Summary:**\n",
    "- **`DECLARE` Variables**: Use when you need temporary storage for data within a stored program.\n",
    "- **`DECLARE` Conditions**: Use when you want to name specific error or status codes for easier reference in handlers.\n",
    "- **`DECLARE` Handlers**: Use when you need to manage what happens if specific conditions occur during the execution of your stored program.\n",
    "\n",
    "Understanding how and when to use `DECLARE` effectively allows you to manage the flow of your stored programs and handle various scenarios, such as errors, in a controlled manner."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
